plugins {
    id "io.freefair.lombok"
    id "io.spring.dependency-management"
    id "java"
    id "org.flywaydb.flyway"
    id "org.springframework.boot"
    id "org.openapi.generator"
}


group = "io.github.bbortt.k6.dashboard"


java {
    sourceCompatibility = "21"
}


repositories {
    mavenCentral()
}


dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "io.hypersistence:hypersistence-utils-hibernate-63:${hypersistenceVersion}"
    implementation "io.swagger.core.v3:swagger-annotations-jakarta:${swaggerAnnotationsJakartaVersion}"
    implementation "jakarta.validation:jakarta.validation-api"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    runtimeOnly "org.postgresql:postgresql"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation platform("org.testcontainers:testcontainers-bom:1.20.1")

    testImplementation "org.awaitility:awaitility:4.2.1"
    testImplementation "org.flywaydb:flyway-core:${flywayVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.testcontainers:testcontainers"

    testRuntimeOnly "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
}


tasks.withType(JavaCompile).all {
    options.compilerArgs += ["--enable-preview"]
}

tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}


flyway {
    url = "jdbc:postgresql://localhost:5432/k6_dashboard"
    user = "k6_dashboard"
    password = "KrPPCHdYSXz6wMct5tUK" // TODO: this is for development only, harden it for production.
    locations = ["filesystem:src/main/resources/db/migration"]
}


tasks.named("test") {
    useJUnitPlatform()
}


task openApiGenerateBackend(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/openapi/k6-report-ingress.yml".toString()
    outputDir = "$buildDir/openapi".toString()
    apiPackage = "io.github.bbortt.k6.report.ingress.web.api"
    modelPackage = "io.github.bbortt.k6.report.ingress.service.api.dto"
    apiFilesConstrainedTo = [""]
    modelFilesConstrainedTo = [""]
    supportingFilesConstrainedTo = ["ApiUtil.java"]
    configOptions = [
            delegatePattern: "true",
            useOptional    : "true",
            useSpringBoot3 : "true",
            useTags        : "true",
            title          : "k6-report-ingress"
    ]
    validateSpec = true
    importMappings = [Problem: "org.springframework.http.ProblemDetail"]
}

sourceSets {
    main {
        java {
            srcDir file("${project.buildDir.path}/openapi/src/main/java")
        }
    }
}

compileJava.dependsOn "openApiGenerateBackend"
